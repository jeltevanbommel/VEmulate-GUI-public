{"version":3,"sources":["assets/img/logo-min.png","components/Navbar.js","components/dashboard/EmulatorSettings.js","components/dashboard/IntInput.js","components/dashboard/OverrideControls.js","layouts/OverrideDashboard.js","layouts/ConfigBuilder.js","layouts/App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","src","logo","alt","height","to","Button","outline","color","EmulatorSettings","useState","persistentConfig","internalConfig","setIC","useEffect","Modal","isOpen","settingsOpen","toggle","closeSettings","ModalHeader","ModalBody","FormGroup","Label","for","Input","type","name","id","onChange","e","input_type","target","value","input_path","output_type","output_path","min","max","result","Number","bit_error_rate","check","bit_error_checksum","checked","delay","timed","stop_condition","ModalFooter","onClick","sendConfig","IntInput","signed","setSigned","bits","setBits","representation","setRepresentation","setValue","error","setError","representations","representationPatterns","newVal","newSign","switchSign","toString","padStart","Math","ceil","formatString","event","val","replace","indexOf","parsedVal","parseInt","Object","is","NaN","console","log","valueChange","changeBits","placeholder","style","width","OverrideControls","item","controls","length","setControls","map","control","index","overridden","overrideValue","default","onChangInput","key","text","keys","values","step","data-abc","cursor","leng","Fade","children","CSSTransition","timeout","classNames","unmountOnExit","OverrideDashboard","running","setRunning","scenarios","setScenarios","fields","setFields","setName","overrides","setOverrides","overrideValues","setOverrideValues","overrideValuesShared","setOverrideValuesShared","searchTerm","setSearchTerm","serialmessages","setSerialmessages","setSettingsOpen","settings","setSettings","undefined","socket","setSocket","socket2","socketIOClient","dec","TextDecoder","on","data","oldMessages","datetime","Date","toLocaleString","content","decode","window","location","reload","emit","protocol","includes","createOverride","stored_val","isInt","isInteger","springConfig","presets","wobbly","ButtonToolbar","ButtonGroup","size","UncontrolledButtonDropdown","DropdownToggle","caret","DropdownMenu","right","DropdownItem","scenario","Row","Col","md","toUpperCase","Table","responsive","TransitionGroup","component","Badge","display","default_val","filter","off","active","message","templates","Loop","amount","seed","IntFixed","StringFixed","RandomInt","ConfigBuilder","tree","setTree","preset","setPresets","selectedPreset","setSelectedPreset","description","selectedPreset2","setSelectedPreset2","preset_fields","config","setConfig","modal","setModal","yaml","setYaml","cleanse","obj","forEach","preview","config_copy","assign","units","require","dump","findVal","object","route","some","k","route2","slice","push","update","attr","newvalue","i","language","docco","navigator","clipboard","writeText","device","version","product_id","bootloader","disabled","position","configCopy","templateClone","random","substr","addItem","items","renderItem","Card","CardHeader","CardBody","childrenProp","confirmChange","dragItem","destinationParent","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OAAe,MAA0B,qC,OC2B1BA,EAtBA,SAACC,GACd,OACE,yBAAQC,UAAU,qGAAlB,UACE,mBAAGA,UAAU,+BAAb,SACE,qBAAKC,IAAKC,EAAMC,IAAI,GAAGC,OAAO,SAGhC,cAAC,IAAD,CAAMC,GAAG,IAAT,SACE,eAACC,EAAA,EAAD,CAAQC,SAAO,EAACC,MAAM,UAAUR,UAAU,YAA1C,UACE,mBAAGA,UAAU,gBADf,kBAIF,cAAC,IAAD,CAAMK,GAAG,eAAT,SACE,eAACC,EAAA,EAAD,CAAQC,SAAO,EAACC,MAAM,UAAUR,UAAU,YAA1C,UACE,mBAAGA,UAAU,kBADf,iC,8PC6JOS,EAnKU,SAACV,GAAW,IAAD,EACFW,mBAASX,EAAMY,kBADb,mBAC3BC,EAD2B,KACXC,EADW,KAKlC,OAHAC,qBAAU,WACRD,EAAMd,EAAMY,oBACX,CAACZ,EAAMY,mBAER,eAACI,EAAA,EAAD,CAAOC,OAAQjB,EAAMkB,aAAcC,OAAQnB,EAAMoB,cAAjD,UACE,cAACC,EAAA,EAAD,CAAaF,OAAQnB,EAAMoB,cAA3B,0CAGA,eAACE,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAOC,IAAI,YAAX,wBACA,eAACC,EAAA,EAAD,CACEC,KAAK,SACLC,KAAK,SACLC,GAAG,YACHC,SAAU,SAACC,GAAD,OACRjB,EAAM,2BAAKD,GAAN,IAAsBmB,WAAYD,EAAEE,OAAOC,UAElDA,MAAOrB,EAAc,WAPvB,UASE,wBAAQqB,MAAM,OAAd,kBACA,wBAAQA,MAAM,SAAd,0BAGJ,eAACX,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAOC,IAAI,YAAX,uDAGA,cAACC,EAAA,EAAD,CACEC,KAAK,OACLE,GAAG,YACHC,SAAU,SAACC,GAAD,OACRjB,EAAM,2BAAKD,GAAN,IAAsBsB,WAAYJ,EAAEE,OAAOC,UAElDA,MAAOrB,EAAc,gBAGzB,eAACU,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAOC,IAAI,aAAX,yBACA,eAACC,EAAA,EAAD,CACEC,KAAK,SACLC,KAAK,SACLC,GAAG,aACHC,SAAU,SAACC,GAAD,OACRjB,EAAM,2BAAKD,GAAN,IAAsBuB,YAAaL,EAAEE,OAAOC,UAEnDA,MAAOrB,EAAc,YAPvB,UASE,wBAAQqB,MAAM,WAAd,sBACA,wBAAQA,MAAM,OAAd,kBACA,wBAAQA,MAAM,SAAd,0BAG+B,aAAlCrB,EAAc,YAAiC,KAC9C,eAACU,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAOC,IAAI,aAAX,wDAGA,cAACC,EAAA,EAAD,CACEC,KAAK,OACLE,GAAG,aACHC,SAAU,SAACC,GAAD,OACRjB,EAAM,2BAAKD,GAAN,IAAsBwB,YAAaN,EAAEE,OAAOC,UAEnDA,MAAOrB,EAAc,iBAI3B,eAACU,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAOC,IAAI,MAAX,kDACA,cAACC,EAAA,EAAD,CACEG,GAAG,MACHS,IAAK,EACLC,IAAK,EACLZ,KAAK,SACLG,SAAU,SAACC,GACT,IAAIS,EAASC,OAAOV,EAAEE,OAAOC,OAC7BpB,EAAM,2BACDD,GADA,IAEH6B,eACEF,EAAS,EAAM,EAAMA,EAAS,EAAM,EAAMA,MAGhDN,MAAOrB,EAAc,oBAGzB,cAACU,EAAA,EAAD,CAAWoB,OAAK,EAAhB,SACE,eAACnB,EAAA,EAAD,CAAOmB,OAAK,EAAZ,UACE,cAACjB,EAAA,EAAD,CACEC,KAAK,WACLG,SAAU,SAACC,GAAD,OACRjB,EAAM,2BACDD,GADA,IAEH+B,mBAAoBb,EAAEE,OAAOY,YAGjCA,QAAShC,EAAc,qBACtB,IAVL,oCAcF,eAACU,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAOC,IAAI,QAAX,oDACA,cAACC,EAAA,EAAD,CACEG,GAAG,QACHS,IAAK,EACLC,IAAK,IACLZ,KAAK,SACLG,SAAU,SAACC,GACT,IAAIS,EAASC,OAAOV,EAAEE,OAAOC,OAC7BpB,EAAM,2BAAKD,GAAN,IAAsBiC,MAAON,EAAS,EAAM,EAAMA,MAEzDN,MAAOrB,EAAc,WAGzB,cAACU,EAAA,EAAD,CAAWoB,OAAK,EAAhB,SACE,eAACnB,EAAA,EAAD,CAAOmB,OAAK,EAAZ,UACE,cAACjB,EAAA,EAAD,CACEC,KAAK,WACLG,SAAU,SAACC,GAAD,OACRjB,EAAM,2BAAKD,GAAN,IAAsBkC,MAAOhB,EAAEE,OAAOY,YAE7CA,QAAShC,EAAc,QACtB,IAPL,iDAWF,eAACU,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAOC,IAAI,gBAAX,gCACA,eAACC,EAAA,EAAD,CACEC,KAAK,SACLC,KAAK,SACLC,GAAG,gBACHC,SAAU,SAACC,GAAD,OACRjB,EAAM,2BAAKD,GAAN,IAAsBmC,eAAgBjB,EAAEE,OAAOC,UAEtDA,MAAOrB,EAAc,eAPvB,UASE,wBAAQqB,MAAM,OAAd,kBACA,wBAAQA,MAAM,OAAd,0CACA,wBAAQA,MAAM,MAAd,yCACA,wBAAQA,MAAM,WAAd,2DAMN,eAACe,EAAA,EAAD,WACE,cAAC1C,EAAA,EAAD,CACEE,MAAM,UACNyC,QAAS,SAACnB,GAAD,OAAO/B,EAAMmD,WAAWtC,IAFnC,kBAKU,IACV,cAACN,EAAA,EAAD,CAAQE,MAAM,YAAYyC,QAASlD,EAAMoB,cAAzC,2BCVOgC,EA3JE,SAACpD,GAAW,IAAD,EACEW,mBACV,MAAhBX,EAAMqD,QAAyBrD,EAAMqD,QAFb,mBACnBA,EADmB,KACXC,EADW,OAIF3C,mBAAuB,MAAdX,EAAMuD,KAAe,GAAKvD,EAAMuD,MAJvC,mBAInBA,EAJmB,KAIbC,EAJa,OAKkB7C,mBAAS,GAL3B,mBAKnB8C,EALmB,KAKHC,EALG,OAMA/C,mBAAwB,MAAfX,EAAMkC,MAAgB,EAAIlC,EAAMkC,OANzC,mBAMnBA,EANmB,KAMZyB,EANY,OAOAhD,oBAAS,GAPT,mBAOnBiD,EAPmB,KAOZC,EAPY,KAQpBC,EAAkB,CAAC,EAAG,GAAI,IAC1BC,EAAyB,CAAC,WAAY,aAAc,kBA6G1D,OACE,sBAAK9D,UAAU,WAAf,UACE,8BACoB,OAAjBD,EAAMqD,OACL,cAAC9C,EAAA,EAAD,CAAQC,SAAO,EAACC,MAAM,UAAUyC,QAAS,kBAhG9B,WACjB,IAEIc,EAFAC,GAAWZ,EACfC,EAAUW,GAOVN,EAJEK,EADEC,EACQ/B,GAASqB,GAASA,EAEnBrB,IAAU,GAGrBlC,EAAM8B,SAAS,CAAEG,OAAQ,CAAEC,MAAO8B,EAAQX,OAAQA,EAAQE,KAAMA,KAsFXW,IAA/C,SACGb,EAAS,OAAM,MAEhB,OAEN,8BACE,sBAAKpD,UAAU,cAAf,UACE,uBACE0B,KAAK,OACL1B,UAAW2D,EAAQ,qBAAuB,eAC1C1B,MAxHW,WACnB,OAAQ4B,EAAgBL,IACtB,KAAK,EACH,OAAQvB,IAAU,GAAGiC,SAAS,GAAGC,SAASb,EAAM,KAClD,KAAK,GACH,OAAOrB,EACT,KAAK,GACH,OAAQA,IAAU,GAAGiC,SAAS,IAAIC,SAASC,KAAKC,KAAKf,EAAO,GAAI,KAClE,QACE,MAAO,OA+GIgB,GACPzC,SAAU,SAAC0C,GAAD,OA7FA,SAACA,GACnB,IAAIC,EAAMD,EAAMvC,OAAOC,MAAMwC,QAC3BX,EAAuBN,GACvB,IAEF,IAAKJ,GAAUoB,EAAIE,QAAQ,MAAQ,EAEjChB,EAASc,EAAIC,QAAQ,IAAK,SAF5B,CAKA,IAAIE,EAAYC,SAASJ,EAAKX,EAAgBL,IAC9C,GAAIqB,OAAOC,GAAGC,IAAKJ,GAIjB,OAFAjB,EAASc,QACTZ,GAAS,GAMXA,GAAS,GACLR,GAAUuB,GAAa,KAAD,IAAE,EAAMrB,EAAO,IACvC0B,QAAQC,IAAI,SACZrB,GAAS,IAEAR,GAAUuB,EAAY,WAAMrB,EAAO,GAAK,GACjD0B,QAAQC,IAAI,SACZrB,GAAS,KAECR,GAAUuB,EAAY,WAAKrB,GAAO,GAC5C0B,QAAQC,IAAI,SACZrB,GAAS,KAECR,GAAUuB,EAAY,IAChCK,QAAQC,IAAI,SACZrB,GAAS,IAGXF,EAASiB,GACT5E,EAAM8B,SAAS,CACbG,OAAQ,CAAEC,MAAO0C,EAAWvB,OAAQA,EAAQE,KAAMA,MAqDvB4B,CAAYX,MAEnC,uBACE7C,KAAK,UACL1B,UAAW2D,EAAQ,qBAAuB,eAC1C1B,MAAOqB,EACPzB,SAAU,SAAC0C,GAAD,OAvDD,SAACA,GACdA,EAAMvC,OAAOC,MAAQ,GAEvBsB,EAAQ,IAERA,EAAQgB,EAAMvC,OAAOC,OAKvB2B,GAAS,GACLR,GAAUnB,GAAS,KAAD,IAAE,EAAMsC,EAAMvC,OAAOC,MAAQ,IACjD+C,QAAQC,IAAI,SACZrB,GAAS,IAEAR,GAAUnB,EAAQ,WAAMsC,EAAMvC,OAAOC,MAAQ,GAAK,GAC3D+C,QAAQC,IAAI,SACZrB,GAAS,KAECR,GAAUnB,EAAQ,WAAKsC,EAAMvC,OAAOC,OAAQ,GACtD+C,QAAQC,IAAI,SACZrB,GAAS,KAECR,GAAUnB,EAAQ,IAC5B+C,QAAQC,IAAI,SACZrB,GAAS,IAIX7D,EAAM8B,SAAS,CACbG,OAAQ,CAAEC,MAAOA,EAAOmB,OAAQA,EAAQE,KAAMiB,EAAMvC,OAAOC,SAyBhCkD,CAAWZ,IAChCa,YAAY,OACZC,MAAO,CAAEC,MAAO,UAElB,cAAChF,EAAA,EAAD,CACEC,SAAO,EACPC,MAAM,UACNyC,QAAS,kBAAMQ,GAAmBD,EAAiB,GAAK,IAH1D,SAKGK,EAAgBL,cCQd+B,EA3JU,SAACxF,GAAW,IAAD,EACFW,mBAC9BX,EAAMyF,KAAKC,SAASC,OAAS,EAAI,EAAI,GAFL,mBAC3BD,EAD2B,KACjBE,EADiB,KASlC,OACE,qCACE,oBAAI3F,UAAU,OAAd,SACGD,EAAMyF,KAAKC,SAASG,KAAI,SAACC,EAASC,GACjC,OAAQD,EAAQnE,MACd,IAAK,WACH,OACE,qBAEE1B,UACEyF,IAAaK,EAAQ,YAAc,mBAHvC,SAME,cAAC,EAAD,CACE1C,OAAQrD,EAAMyF,KAAKpC,OACnBE,KAAMvD,EAAMyF,KAAKlC,KACjBrB,MACEwD,IAAaK,GAAS/F,EAAMgG,WACxBhG,EAAMiG,cACNjG,EAAMyF,KAAKS,QAEjBpE,SAAU,SAAC0C,GAAD,OACRxE,EAAMmG,aACJnG,EAAMyF,KAAKW,IACX5B,EACAxE,EAAMyF,KAAKY,KACX7B,EAAMvC,OAAOsB,KACbiB,EAAMvC,OAAOoB,YAnBd,IAAMrD,EAAMyF,KAAKW,IAAM,IAAML,GAyBxC,IAAK,WACH,OACE,qBAEE9F,UACEyF,IAAaK,EAAQ,YAAc,mBAHvC,SAME,eAACrE,EAAA,EAAD,CACEC,KAAK,SACLC,KAAK,SACL3B,UAAU,sBACV6B,SAAU,SAAC0C,GAAD,OACRxE,EAAMmG,aACJnG,EAAMyF,KAAKW,IACX5B,EACAxE,EAAMyF,KAAKY,KACXrG,EAAMyF,KAAKlC,KACXvD,EAAMyF,KAAKpC,SAVjB,UAcE,wBAAQnB,MAAM,GAAd,eACC4C,OAAOwB,KAAKR,EAAQS,QAAQV,KAAI,SAACO,GAChC,OACE,yBAAkBlE,MAAO4D,EAAQS,OAAOH,GAAxC,UACGN,EAAQS,OAAOH,GADlB,KAC0BA,IADbA,UAtBd,IAAMpG,EAAMyF,KAAKW,IAAM,IAAML,GA8BxC,IAAK,cACH,OACE,qBAEE9F,UACEyF,IAAaK,EAAQ,YAAc,mBAHvC,SAME,uBACEjE,SAAU,SAAC0C,GAAD,OACRxE,EAAMmG,aACJnG,EAAMyF,KAAKW,IACX5B,EACAxE,EAAMyF,KAAKY,KACXrG,EAAMyF,KAAKlC,KACXvD,EAAMyF,KAAKpC,SAGf1B,KAAK,OACL1B,UAAU,eACViC,MACEwD,IAAaK,GAAS/F,EAAMgG,WACxBhG,EAAMiG,cACNjG,EAAMyF,KAAKS,WApBd,IAAMlG,EAAMyF,KAAKW,IAAM,IAAML,GAyBxC,IAAK,QACH,OACE,sBAEE9F,UAAWyF,IAAaK,EAAQ,OAAS,cAF3C,UAIE,uBACEpE,KAAK,QACL1B,UAAU,aACVqC,IAAKwD,EAAQxD,IACbC,IAAKuD,EAAQvD,IACbT,SAAU,SAAC0C,GAAD,OACRxE,EAAMmG,aACJnG,EAAMyF,KAAKW,IACX5B,EACAxE,EAAMyF,KAAKY,KACXrG,EAAMyF,KAAKlC,KACXvD,EAAMyF,KAAKpC,SAGfmD,KAAK,IACLtE,MACEwD,IAAaK,GAAS/F,EAAMgG,WACxBhG,EAAMiG,cACNjG,EAAMyF,KAAKS,UAGnB,sBAAKjG,UAAU,iCAAf,UACE,uBAAOA,UAAU,aAAjB,SAA+B6F,EAAQxD,MACvC,gCAAQtC,EAAMiG,gBACd,uBAAOhG,UAAU,aAAjB,SAA+B6F,EAAQvD,WA3BpC,IAAMvC,EAAMyF,KAAKW,IAAM,IAAML,GA+BxC,QACE,OAAO,WAIf,6BACE,sBAAMU,WAAS,OAAOnB,MAAO,CAAEoB,OAAQ,WAAvC,SACE,sBACEzG,UAAU,qCACViD,QAAS,kBA7IEyD,EA6IgB3G,EAAMyF,KAAKC,SAASC,YA5IvDC,GAAaF,EAAW,GAAKiB,GADX,IAACA,GA2Ib,SAIE,mBAAG1G,UAAU,6BClInB2G,EAAO,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAa7G,EAAhB,mCACX,cAAC8G,EAAA,EAAD,2BAAmB9G,GAAnB,IAA0B+G,QAAS,IAAKC,WAAW,OAAOC,eAAa,EAAvE,SACGJ,MA+WUK,EA3WW,WAAO,IAAD,EACAvG,mBAAS,WADT,mBACvBwG,EADuB,KACdC,EADc,OAEIzG,mBAAS,IAFb,mBAEvB0G,EAFuB,KAEZC,EAFY,OAGF3G,mBAAS,IAHP,mBAGvB4G,EAHuB,KAGfC,EAHe,OAIN7G,mBAAS,OAJH,mBAIvBiB,EAJuB,KAIjB6F,EAJiB,OAKI9G,mBAAS,IALb,mBAKvB+G,EALuB,KAKZC,EALY,OAMchH,mBAAS,IANvB,mBAMvBiH,EANuB,KAMPC,EANO,OAO0BlH,mBAAS,IAPnC,mBAOvBmH,EAPuB,KAODC,EAPC,OAQMpH,mBAAS,IARf,mBAQvBqH,GARuB,KAQXC,GARW,QASctH,mBAAS,IATvB,qBASvBuH,GATuB,MASPC,GATO,SAUUxH,oBAAS,GAVnB,qBAUvBO,GAVuB,MAUTkH,GAVS,SAWEzH,mBAAS,IAXX,qBAWvB0H,GAXuB,MAWbC,GAXa,SAYF3H,wBAAS4H,GAZP,qBAYvBC,GAZuB,MAYfC,GAZe,MAe9B1H,qBAAU,WACR,IAAI2H,EAAUC,IAxBD,UAyBPC,EAAM,IAAIC,YAAY,SAC5BH,EAAQI,GAAG,gBAAgB,SAACC,GAE1BZ,IAAkB,SAACa,GAAD,OAChB,CACErH,KAAM,SACNsH,UAAU,IAAIC,MAAOC,iBACrBC,QAASR,EAAIS,OAAON,EAAKA,QAJX,mBAMbC,UAGPN,EAAQI,GAAG,eAAe,SAACC,GAEzBZ,IAAkB,SAACa,GAAD,OAChB,CACErH,KAAM,QACNsH,UAAU,IAAIC,MAAOC,iBACrBC,QAASR,EAAIS,OAAON,EAAKA,QAJX,mBAMbC,UAGPN,EAAQI,GAAG,WAAW,SAACC,GAErBzB,EAAayB,EAAKA,SAEpBL,EAAQI,GAAG,YAAY,SAACC,GAEtBT,GAAYS,MAEdL,EAAQI,GAAG,cAAc,WAEvBQ,OAAOC,SAASC,QAAO,MAEzBd,EAAQI,GAAG,mBAAmB,SAACC,GAE7B3B,EAAW2B,EAAKA,SAElBL,EAAQI,GAAG,qBAAqB,SAACC,GAE/BpB,EAAaoB,EAAKA,MAClBhB,EAAwBgB,EAAKxC,WAE/BmC,EAAQI,GAAG,iBAAiB,SAACC,GAE3BtB,EAAQsB,EAAKnH,MACb4F,EAAUuB,EAAKxB,WAEjBmB,EAAQe,KAAK,aACbhB,GAAUC,KACT,IAIH,IAiDMvC,GAAe,SAACC,EAAK5B,EAAOkF,EAAUnG,EAAMF,GAChDwE,EAAkB,2BAAKD,GAAN,kBAAuBxB,EAAM5B,EAAMvC,OAAOC,SACvDwF,EAAUiC,SAASvD,IACrBoC,GAAOiB,KAAK,WAAY,CACtBrD,IAAKA,EACLC,KAAMqD,EACNxH,MAAO0H,GAAepF,EAAMvC,OAAOC,MAAOwH,EAAUtD,EAAK7C,EAAMF,GAC/DwG,WAAYrF,EAAMvC,OAAOC,SAOzB0H,GAAiB,SAAC1H,EAAOwH,EAAUtD,EAAK7C,EAAMF,GAClD,IAAIyG,EAAQrH,OAAOsH,UAAUtH,OAAOP,IAEpC,MAAO,CACL,CACEP,KAAMmI,EAAQ,WAAa,cAC3BJ,SAAUA,EACVtD,IAAKA,EACL7C,KAAMA,EACNF,OAAQA,EACRnB,MAAO4H,EAAQrH,OAAOP,GAASA,KAKrC,OACE,uBAAMjC,UAAU,UAAhB,UACE,cAAC,EAAD,CACEiB,aAAcA,GACdE,cAAe,kBAAMgH,IAAgB,IACrCjF,WA9De,SAACkF,GACpBG,GAAOiB,KAAK,eAAgBpB,GAC5BD,IAAgB,IA6DZxH,iBAAkByH,KAEpB,sBAAKpI,UAAU,0GAAf,UACE,4CACa,IACX,iCACE,cAAC,IAAD,CAAgBoG,KAAMzE,EAAMoI,aAAcC,IAAQC,cAGtD,eAACC,EAAA,EAAD,CAAelK,UAAU,eAAzB,UACE,eAACmK,EAAA,EAAD,CAAanK,UAAU,OAAvB,UACe,YAAZkH,EACC,cAAC5G,EAAA,EAAD,CAAQC,SAAO,EAACC,MAAM,UAAU4J,KAAK,KAAKnH,QAAS,WAvF7DsF,GAAOiB,KAAK,UAuFF,SACE,mBAAGxJ,UAAU,mBAGf,cAACM,EAAA,EAAD,CAAQC,SAAO,EAACC,MAAM,UAAU4J,KAAK,KAAKnH,QAAS,WA/F7DsF,GAAOiB,KAAK,QA+FF,SACE,mBAAGxJ,UAAU,kBAGJ,WAAZkH,GAAoC,YAAZA,EACvB,cAAC5G,EAAA,EAAD,CAAQC,SAAO,EAACC,MAAM,SAAS4J,KAAK,KAAKnH,QAAS,WA5F5DsF,GAAOiB,KAAK,SA4FF,SACE,mBAAGxJ,UAAU,kBAEb,QAEN,cAACM,EAAA,EAAD,CACEN,UAAU,OACVO,SAAO,EACPC,MAAM,OACN4J,KAAK,KACLnH,QAAS,kBAlGjBsF,GAAOiB,KAAK,qBACZrB,IAAgB,IA4FV,SAOE,mBAAGnI,UAAU,iBAEf,eAACqK,EAAA,EAAD,CAA4BD,KAAK,KAAK5J,MAAM,YAA5C,UACE,eAAC8J,EAAA,EAAD,CAAgBC,OAAK,EAArB,UACE,mBAAGvK,UAAU,qBADf,oCAIA,cAACwK,EAAA,EAAD,CAAcC,OAAK,EAAnB,SACGrD,EAAUxB,KAAI,SAACJ,EAAMM,GACpB,OACE,cAAC4E,EAAA,EAAD,CACEzH,QAAS,kBAhIL0H,EAgIwBnF,OA/H5C+C,GAAOiB,KAAK,cAAemB,GADR,IAACA,GA+HN,SAIGnF,GAFIA,EAAOM,iBAU1B,eAAC8E,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,CAAKC,GAAG,IAAR,UACG,IACD,uBACEjJ,SAAU,SAAC0C,GAAD,OACRyD,GAAczD,EAAMvC,OAAOC,MAAM8I,gBAEnCrJ,KAAK,OACL1B,UAAU,eACVoF,YAAa,SACbnD,MAAO8F,KAET,eAACiD,EAAA,EAAD,CAAOC,YAAU,EAACjL,UAAU,iCAA5B,UACE,gCACE,+BACE,oBAAIA,UAAU,aAAaqF,MAAO,CAAEC,MAAO,QAA3C,wBAGA,oBAAItF,UAAU,aAAaqF,MAAO,CAAEC,MAAO,SAC3C,oBAAID,MAAO,CAAEC,MAAO,SACpB,uBACA,oBAAItF,UAAU,aAAaqF,MAAO,CAAEC,MAAO,QAA3C,4BAGA,oBAAItF,UAAU,aAAaqF,MAAO,CAAEC,MAAO,SAA3C,8BAGA,oBAAItF,UAAU,aAAaqF,MAAO,CAAEC,MAAO,QAA3C,gCAKJ,cAAC4F,EAAA,EAAD,CAAiBlL,UAAU,gBAAgBmL,UAAU,QAArD,SACG7D,EAAO1B,KAAI,SAACJ,GACX,OACE,cAAC,EAAD,UACE,qBACExF,WACGwF,EAAKW,IAAM,IAAMX,EAAK7D,MACpBoJ,cACArG,QAAQqD,KAAe,EACtB,WACA,kBANR,UASE,+BACE,cAACqD,EAAA,EAAD,CAAO5K,MAAM,UAAUR,UAAU,iBAAjC,SACGwF,EAAK7D,OAER,cAACyJ,EAAA,EAAD,CACE5K,MAAM,YACNR,UAAU,iBACVqF,MAAO,CAAEgG,QAAS,SAHpB,SAKG7F,EAAKW,SAGV,cAAC,EAAD,CACEX,KAAMA,EACNO,WAAYP,EAAKW,OAAOwB,EACxB3B,cAAe2B,EAAenC,EAAKW,KACnCD,aAAcA,KAEhB,uBACA,oBAAIlG,UAAU,OAAd,SACE,sBAAMA,UAAU,sBAAhB,SACG6H,EAAqBrC,EAAKW,SAG/B,6BACE,cAAC,IAAD,CACElD,QAAS,SAACsB,GAAD,OAxLf4B,EA0LUX,EAAKW,IA1LVrE,EA2LKyC,EA3LFkF,EA4LEjE,EAAKY,KA5LG9C,EA6LRkC,EAAKlC,KA7LSF,EA8LdoC,EAAKpC,OA9LiBkI,EA+LtB9F,EAAKS,QA9L/ByB,EAAaD,EAAU8D,QAAO,SAAC/F,GAAD,OAAUA,IAASW,WAC7CrE,EAEFyG,GAAOiB,KAAK,WAAY,CACtBrD,IAAKA,EACLC,KAAMqD,EACNxH,MAAO0H,GACLxD,KAAOwB,EAAiBA,EAAexB,GAAOmF,EAC9C7B,EACAtD,EACA7C,EACAF,GAEFwG,WAAYjC,EAAexB,KAI7BoC,GAAOiB,KAAK,kBAAmB,CAAErD,IAAKA,EAAKC,KAAMqD,KAlBpC,IAACtD,EAAKrE,EAAG2H,EAAUnG,EAAMF,EAAQkI,GAkM1BzC,GAAG,aACH2C,IAAI,YACJpB,KAAK,KACLqB,OAAQhE,EAAUiC,SAASlE,EAAKW,SAGpC,6BACGX,EAAKY,OAAsB,IAAdZ,EAAKY,KACjB,sBAAMpG,UAAU,uCACd,WAvDC2B,EAAO,IAAM6D,EAAKW,gBAgEvC,cAAC0E,EAAA,EAAD,CAAKC,GAAG,IAAR,SACE,eAACE,EAAA,EAAD,CACEC,YAAU,EACVjL,UAAU,uDAFZ,UAIE,gCACE,+BACE,oBAAIqF,MAAO,CAAEC,MAAO,YACpB,oBAAID,MAAO,CAAEC,MAAO,SACpB,oBAAID,MAAO,CAAEC,MAAO,UAApB,SACE,cAAChF,EAAA,EAAD,CACEC,SAAO,EACPC,MAAM,YACN4J,KAAK,KACLnH,QAAS,kBAAMiF,GAAkB,KAJnC,SAME,mBAAGlI,UAAU,0BAKrB,uBAAO4B,GAAG,MAAV,SACGqG,GAAerC,KAAI,SAAC8F,GACnB,OACE,qBAAI1L,UAAU,iBAAd,UACE,6BACE,sBAAMwG,WAAS,OAAf,SACoB,WAAjBkF,EAAQhK,KACP,sBAAM1B,UAAU,qCAAhB,oBAIA,sBAAMA,UAAU,kCAAhB,uBAMN,oBAAIA,UAAU,OAAd,SACE,qBAAKA,UAAU,kBAAf,SAAkC0L,EAAQvC,YAE5C,6BAAKuC,EAAQ1C,+B,+DCrW3B2C,EAAY,CAChBC,KAAM,CAAElK,KAAM,OAAQmK,OAAQ,GAAIC,KAAM,GAAIxF,OAAQ,IACpDyF,SAAU,CAAErK,KAAM,WAAYmK,OAAQ,GAAI5J,MAAO,IACjD+J,YAAa,CAAEtK,KAAM,cAAemK,OAAQ,GAAI5J,MAAO,IACvDgK,UAAW,CAAEvK,KAAM,YAAamK,OAAQ,GAAIC,KAAM,GAAIzJ,IAAK,GAAIC,IAAK,KAkfvD4J,GA/eO,WAAO,IAAD,EACFxL,mBAAS,IADP,mBACnByL,EADmB,KACbC,EADa,OAEG1L,mBAAS,IAFZ,mBAEnB2L,EAFmB,KAEXC,EAFW,OAGkB5L,mBAAS,IAH3B,mBAGnB6L,EAHmB,KAGHC,EAHG,OAIoB9L,mBAAS,CAErDyF,IAAK,GACLsG,YAAa,KAPW,mBAInBC,EAJmB,KAIFC,EAJE,OASEjM,mBAAS,CAAE2L,OAAQ,GAAIO,cAAe,KATxC,mBASnBC,EATmB,KASXC,EATW,OAUApM,oBAAS,GAVT,mBAUnBqM,EAVmB,KAUZC,EAVY,OAWFtM,mBAAS,IAXP,mBAWnBuM,EAXmB,KAWbC,EAXa,KAYpBhM,GAAS,kBAAM8L,GAAUD,IAE/BjM,qBAAU,WACR,IAAI2H,EAAUC,IAAe,UAC7BD,EAAQI,GAAG,WAAW,SAACC,GACrBwD,EAAWxD,EAAKA,SAGlBL,EAAQe,KAAK,iBACZ,IAOH,IAAM2D,GAAU,SAAVA,EAAWC,GACfvI,OAAOwB,KAAK+G,GAAKC,SAAQ,SAAUlH,GACjC,IAAIlE,EAAQmL,EAAIjH,GACZzE,SAAcO,EACN,OAARkE,UAEKiH,EAAIjH,GAET3D,OAAOsH,UAAUtH,OAAOP,MAC1BmL,EAAIjH,GAAO3D,OAAOP,IAEP,WAATP,GAEFyL,EAAQlL,GACH4C,OAAOwB,KAAKpE,GAAOyD,eACf0H,EAAIjH,IAEK,cAATzE,UAEF0L,EAAIjH,OAQXmH,GAAU,WACd,IAAIC,EAAc1I,OAAO2I,OAAO,GAAIX,GACpCU,EAAW,OAAa,CACtB5L,KAAM,OACNwE,IAAK,IACLsH,MAAO,IACPnH,OAAQ6F,GAGVgB,GAAQI,GACR,IAAMN,EAAOS,EAAQ,KACrBR,EAAQD,EAAKU,KAAKJ,IAClBrM,MAWI0M,GAAU,SAAVA,EAAWC,EAAQ1H,EAAK2H,GAC5B,IAAI7L,EAgBJ,OAfA4C,OAAOwB,KAAKwH,GAAQE,MAAK,SAAUC,GACjC,GAAU,OAANA,GAAcH,EAAOG,KAAO7H,EAE9B,OADAlE,EAAQ6L,GACD,EAET,GAAID,EAAOG,IAA2B,kBAAdH,EAAOG,GAAiB,CAC9C,IAAIC,EAASH,EAAMI,QAKnB,MAJU,WAANF,GACFC,EAAOE,KAAKH,QAGG1F,KADjBrG,EAAQ2L,EAAQC,EAAOG,GAAI7H,EAAK8H,IAGlC,OAAO,KAEFhM,GASHmM,GAAS,SAACxM,EAAIyM,EAAMC,GAIxB,IAHA,IAAIR,EAAQF,GAAQzB,EAAMvK,EAAI,IAC1BiL,EAASV,EAAK+B,QACd1J,EAAM2H,EACDoC,EAAI,EAAGA,EAAIT,EAAMpI,OAAS,EAAG6I,IACpC/J,EAAMA,EAAIsJ,EAAMS,IAAIjI,OAEtB9B,EAAIsJ,EAAMA,EAAMpI,OAAS,IAAI2I,GAAQC,EACrClC,EAAQS,IAyDV,OACE,uBAAM7M,UAAU,UAAhB,UACE,qBAAKA,UAAU,0GAAf,SACE,kDACmB,IACjB,cAACM,EAAA,EAAD,CAAQ2C,QAAS,SAACsB,GAAD,OAAW+I,MAA5B,6BACA,iCACE,cAAC,IAAD,CACElH,KACE,SAAUyG,QAA0BvE,IAAhBuE,EAAOlL,KACvBkL,EAAOlL,KACP,MAENoI,aAAcC,IAAQC,gBAK9B,eAACW,EAAA,EAAD,WACE,eAAC7J,EAAA,EAAD,CAAOC,OAAQ+L,EAAO7L,OAAQA,GAA9B,UACE,cAACE,EAAA,EAAD,CAAaF,OAAQA,GAArB,8BACA,cAACG,EAAA,EAAD,UACE,cAAC,IAAD,CAAmBmN,SAAS,OAAOnJ,MAAOoJ,IAA1C,SACGxB,MAGL,eAACjK,EAAA,EAAD,WACE,cAAC1C,EAAA,EAAD,CACEE,MAAM,UACNyC,QAAS,SAACnB,GAAD,OAAO4M,UAAUC,UAAUC,UAAU3B,IAFhD,kBAKU,IACV,cAAC3M,EAAA,EAAD,CAAQE,MAAM,YAAYyC,QAAS/B,GAAnC,0BAKJ,qBAAKlB,UAAU,kCAAf,SACE,sBAAKA,UAAU,OAAOqF,MAAO,CAAEC,MAAO,QAAtC,UACE,oBAAItF,UAAU,cAAd,8BACA,sBAAKA,UAAU,YAAf,UACE,oBAAIA,UAAU,cAAd,uBACA,mBAAGA,UAAU,YAAb,+IAKA,qBAAKA,UAAU,aAAf,SACE,uBACE0B,KAAK,OACL1B,UAAU,eACV4B,GAAG,2BACHwD,YAAY,eACZvD,SAAU,SAAC0C,GAAD,OACRuI,EAAU,2BAAKD,GAAN,IAAclL,KAAM4C,EAAMvC,OAAOC,cAIhD,oBAAIjC,UAAU,kBAAd,yBACA,mBAAGA,UAAU,YAAb,uIAIA,qBAAKA,UAAU,aAAf,SACE,uBACE0B,KAAK,OACL1B,UAAU,eACV4B,GAAG,2BACHwD,YAAY,iBACZvD,SAAU,SAAC0C,GAAD,OACRuI,EAAU,2BAAKD,GAAN,IAAcgC,OAAQtK,EAAMvC,OAAOC,cAKlD,oBAAIjC,UAAU,kBAAd,yBACA,mBAAGA,UAAU,YAAb,mEAGA,qBAAKA,UAAU,aAAf,SACE,uBACE0B,KAAK,OACL1B,UAAU,eACV4B,GAAG,2BACHwD,YAAY,OACZvD,SAAU,SAAC0C,GAAD,OACRuI,EAAU,2BAAKD,GAAN,IAAciC,QAASvK,EAAMvC,OAAOC,cAInD,oBAAIjC,UAAU,kBAAd,wBACA,mBAAGA,UAAU,YAAb,4DAGA,qBAAKA,UAAU,aAAf,SACE,uBACE0B,KAAK,OACL1B,UAAU,eACV4B,GAAG,2BACHwD,YAAY,OACZvD,SAAU,SAAC0C,GAAD,OACRuI,EAAU,2BAAKD,GAAN,IAAckC,WAAYxK,EAAMvC,OAAOC,cAItD,oBAAIjC,UAAU,kBAAd,wBACA,mBAAGA,UAAU,YAAb,6FAIA,qBAAKA,UAAU,aAAf,SACE,uBACE0B,KAAK,OACL1B,UAAU,eACV4B,GAAG,2BACHwD,YAAY,QACZvD,SAAU,SAAC0C,GAAD,OACRuI,EAAU,2BAAKD,GAAN,IAAcmC,WAAYzK,EAAMvC,OAAOC,cAItD,oBAAIjC,UAAU,kBAAd,4BACA,mBAAGA,UAAU,YAAb,uFAIA,yBACEA,UAAU,mCACV6B,SAAU,SAAC0C,GAAD,OACRuI,EAAU,2BAAKD,GAAN,IAAcpD,SAAUlF,EAAMvC,OAAOC,UAHlD,UAME,wBAAQA,MAAM,OAAd,kBACA,wBAAQA,MAAM,MAAd,iBACA,wBAAQA,MAAM,WAAd,mCAKR,eAAC4I,EAAA,EAAD,CAAKC,GAAI,EAAT,UACE,sBAAK9K,UAAU,OAAf,UACE,oBAAIA,UAAU,cAAd,oCACA,sBAAKA,UAAU,YAAf,UACE,oBAAIA,UAAU,aAAd,yBACA,mBAAGA,UAAU,YAAb,sLAKA,wBACEA,UAAU,eACViP,SACE,kBAAmBpC,GACK,MAAxBA,EAAOD,eACP/H,OAAOwB,KAAKwG,EAAOD,eAAelH,OAAS,EAE7C7D,SAAU,SAAC0C,GACTiI,EAAkBjI,EAAMvC,OAAOC,OAC/B0K,EACEN,EAAO9H,EAAMvC,OAAOC,OAAOyD,OAAS,EAChC2G,EAAO9H,EAAMvC,OAAOC,OAAO,GAC3B,CAAEkE,IAAK,GAAIsG,YAAa,KAE9BK,EAAU,2BACLD,GADI,IAEPD,mBAAetE,EACf+D,YAAQ/D,MAjBd,SAqBGzD,OAAOwB,KAAKgG,GAAQzG,KAAI,SAACjE,GACxB,OAAO,iCAASA,SAGA,KAAnB4K,EACC,wBACEvM,UAAU,eACV6B,SAAU,SAAC0C,GACToI,EACEN,EAAOE,GAAgBhI,EAAMvC,OAAOC,SAJ1C,SAQGoK,EAAOE,GAAgB3G,KAAI,SAACjE,EAAMmE,GACjC,OAAO,wBAAQ7D,MAAO6D,EAAf,SAAuBnE,EAAKwE,WAGrC,KACHuG,EAAgBD,YACjB,uBACyB,KAAxBC,EAAgBvG,IACf,yBACEzE,KAAK,SACL1B,UAAU,iCACViD,QAAS,kBA1ONkD,EA0OsBuG,EAAgBvG,SAzOvD2G,EAAU,2BACLD,GADI,IAEPR,OAAQE,EACRK,cAAc,2BAAMC,EAAOD,eAAd,kBAA8BzG,EAAM,eAJnC,IAACA,GAuOL,iBAKOuG,EAAgBvG,OAErB,WAGP,kBAAmB0G,GAA0C,kBAAzBA,EAAOD,cACxC/H,OAAOwB,KAAKwG,EAAOD,eAAehH,KAAI,SAACJ,EAAMM,GAC3C,OACE,sBAAK9F,UAAU,oCAAf,UACE,sBAAKA,UAAU,cAAf,UACGwF,EACD,wBACE9D,KAAK,SACL1B,UAAW,+BACXqF,MAAO,CAAEoF,MAAO,OAAQyE,SAAU,YAClCjM,QAAS,WACP,IAAMkM,EAAatK,OAAO2I,OAAO,GAAIX,UAC9BsC,EAAWvC,cAAcpH,GAChCsH,EAAUqC,IAPd,kBAaF,sBAAKnP,UAAU,YAAf,UACE,wBACE0B,KAAK,SACL1B,UACiC,WAA/B6M,EAAOD,cAAcpH,GACjB,8BACA,oCAENvC,QAAS,kBACP6J,EAAU,2BACLD,GADI,IAEPD,cAAc,2BACTC,EAAOD,eADC,kBAEVpH,EAAO,eAZhB,oBAoBA,wBACE9D,KAAK,SACL1B,UACiC,YAA/B6M,EAAOD,cAAcpH,GACjB,8BACA,oCAENvC,QAAS,kBACP6J,EAAU,2BACLD,GADI,IAEPD,cAAc,2BACTC,EAAOD,eADC,kBAEVpH,EAAO,gBAZhB,qBAoBA,wBACE9D,KAAK,SACL1B,UACiC,YAA/B6M,EAAOD,cAAcpH,GACjB,8BACA,oCAENvC,QAAS,kBACP6J,EAAU,2BACLD,GADI,IAEPD,cAAc,2BACTC,EAAOD,eADC,kBAEVpH,EAAO,gBAZhB,8BAuBR,QAEN,eAACqF,EAAA,EAAD,CAAKC,GAAI,EAAT,UACE,6CAEE,wBACE9K,UAAU,eACV6B,SAAU,SAAC0C,IArVP,SAAC4B,GACf,IAAIiJ,EAAgBvK,OAAO2I,OAAO,GAAI7B,EAAUxF,IAChDiJ,EAAa,GAAS,IAAMhL,KAAKiL,SAASnL,SAAS,IAAIoL,OAAO,EAAG,GACjElD,EAAQ,GAAD,mBAAKD,GAAL,CAAWiD,KAmVNG,CAAQhL,EAAMvC,OAAOC,QAHzB,SAMG4C,OAAOwB,KAAKsF,GAAW/F,KAAI,SAACjE,GAC3B,OAAO,iCAASA,YAItB,cAAC,IAAD,CACE6N,MAAOrD,EACPsD,WAzUS,SAAC,GAAc,IAAZjK,EAAW,EAAXA,KACpB,OACE,eAACkK,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UAAanK,EAAK9D,OAClB,cAACkO,EAAA,EAAD,UACG/K,OAAOwB,KAAKb,GAAMI,KAAI,SAACO,GACtB,MAAY,WAARA,GAA4B,OAARA,GAAwB,SAARA,EAC/B,6BAGP,eAAC7E,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAOC,IAAI,kBAAX,SAA8B2E,IAC9B,cAAC1E,EAAA,EAAD,CACEC,KAAK,OACLO,MAAOuD,EAAKW,GACZtE,SAAU,SAAC0C,GACT6J,GAAO5I,EAAK5D,GAAIuE,EAAK5B,EAAMvC,OAAOC,sBA0T1C4N,aAAc,SACdC,cAAe,SAACC,EAAUC,GACxB,OAAyB,MAArBA,IAIyB,cAA3BA,EAAkBtO,MACS,SAA3BsO,EAAkBtO,MACS,iBAA3BsO,EAAkBtO,OAOtBG,SAAU,SAAC2N,GAAD,OAAWpD,EAAQoD,gB,SClf1BS,OAdf,WACE,OACE,qBAAKjQ,UAAU,MAAf,SACE,eAAC,IAAD,WACE,cAAC,EAAD,IACA,eAAC,KAAD,WACE,cAAC,KAAD,CAAOkQ,OAAK,EAACC,KAAK,eAAehF,UAAWe,KAC5C,cAAC,KAAD,CAAOiE,KAAK,IAAIhF,UAAWlE,aCAtBmJ,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1Bb,O","file":"static/js/main.0e5f1b56.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo-min.f9110c34.png\";","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button } from \"reactstrap\";\r\nimport logo from \"assets/img/logo-min.png\";\r\n\r\nconst Navbar = (props) => {\r\n  return (\r\n    <header className=\"d-flex flex-column flex-md-row align-items-center p-3 px-md-4 mb-3 bg-body border-bottom shadow-sm\">\r\n      <p className=\"h5 my-0 me-md-auto fw-normal\">\r\n        <img src={logo} alt=\"\" height=\"80\" />\r\n      </p>\r\n\r\n      <Link to=\"/\">\r\n        <Button outline color=\"primary\" className=\"px-2 mx-1\">\r\n          <i className=\"fas fa-home\"></i> Dashboard\r\n        </Button>\r\n      </Link>\r\n      <Link to=\"/scenariogen\">\r\n        <Button outline color=\"primary\" className=\"px-2 mx-1\">\r\n          <i className=\"fas fa-hammer\"></i>\r\n          Configuration Builder\r\n        </Button>\r\n      </Link>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  FormGroup,\r\n  Input,\r\n  Label,\r\n} from \"reactstrap\";\r\n\r\nconst EmulatorSettings = (props) => {\r\n  const [internalConfig, setIC] = useState(props.persistentConfig); // A representation of the VEmulator's internal config, but client-side\r\n  useEffect(() => {\r\n    setIC(props.persistentConfig); // If the props update the config, i.e. a new one has been received via the websocket, update.\r\n  }, [props.persistentConfig]);\r\n  return (\r\n    <Modal isOpen={props.settingsOpen} toggle={props.closeSettings}>\r\n      <ModalHeader toggle={props.closeSettings}>\r\n        VEmulate Persistent Settings\r\n      </ModalHeader>\r\n      <ModalBody>\r\n        <FormGroup>\r\n          <Label for=\"inputType\">Input Type</Label>\r\n          <Input\r\n            type=\"select\"\r\n            name=\"select\"\r\n            id=\"inputType\"\r\n            onChange={(e) =>\r\n              setIC({ ...internalConfig, input_type: e.target.value })\r\n            }\r\n            value={internalConfig[\"input_type\"]}\r\n          >\r\n            <option value=\"file\">File</option>\r\n            <option value=\"serial\">Serial</option>\r\n          </Input>\r\n        </FormGroup>\r\n        <FormGroup>\r\n          <Label for=\"inputPath\">\r\n            Input Location (e.g. COM01, or /dev/usb1)\r\n          </Label>\r\n          <Input\r\n            type=\"text\"\r\n            id=\"inputPath\"\r\n            onChange={(e) =>\r\n              setIC({ ...internalConfig, input_path: e.target.value })\r\n            }\r\n            value={internalConfig[\"input_path\"]}\r\n          />\r\n        </FormGroup>\r\n        <FormGroup>\r\n          <Label for=\"outputType\">Output Type</Label>\r\n          <Input\r\n            type=\"select\"\r\n            name=\"select\"\r\n            id=\"outputType\"\r\n            onChange={(e) =>\r\n              setIC({ ...internalConfig, output_type: e.target.value })\r\n            }\r\n            value={internalConfig[\"output_type\"]}\r\n          >\r\n            <option value=\"standard\">Standard</option>\r\n            <option value=\"file\">File</option>\r\n            <option value=\"serial\">Serial</option>\r\n          </Input>\r\n        </FormGroup>\r\n        {internalConfig[\"output_type\"] === \"standard\" ? null : (\r\n          <FormGroup>\r\n            <Label for=\"outputPath\">\r\n              Output Location (e.g. COM01, or /dev/usb1)\r\n            </Label>\r\n            <Input\r\n              type=\"text\"\r\n              id=\"outputPath\"\r\n              onChange={(e) =>\r\n                setIC({ ...internalConfig, output_path: e.target.value })\r\n              }\r\n              value={internalConfig[\"output_path\"]}\r\n            />\r\n          </FormGroup>\r\n        )}\r\n        <FormGroup>\r\n          <Label for=\"ber\">Bit error rate (between 0.0 and 1.0)</Label>\r\n          <Input\r\n            id=\"ber\"\r\n            min={0}\r\n            max={1}\r\n            type=\"number\"\r\n            onChange={(e) => {\r\n              let result = Number(e.target.value);\r\n              setIC({\r\n                ...internalConfig,\r\n                bit_error_rate:\r\n                  result > 1.0 ? 1.0 : result < 0.0 ? 0.0 : result,\r\n              });\r\n            }}\r\n            value={internalConfig[\"bit_error_rate\"]}\r\n          />\r\n        </FormGroup>\r\n        <FormGroup check>\r\n          <Label check>\r\n            <Input\r\n              type=\"checkbox\"\r\n              onChange={(e) =>\r\n                setIC({\r\n                  ...internalConfig,\r\n                  bit_error_checksum: e.target.checked,\r\n                })\r\n              }\r\n              checked={internalConfig[\"bit_error_checksum\"]}\r\n            />{\" \"}\r\n            Allow bit errors in checksum\r\n          </Label>\r\n        </FormGroup>\r\n        <FormGroup>\r\n          <Label for=\"delay\">Delay in seconds between text messages</Label>\r\n          <Input\r\n            id=\"delay\"\r\n            min={0}\r\n            max={1000}\r\n            type=\"number\"\r\n            onChange={(e) => {\r\n              let result = Number(e.target.value);\r\n              setIC({ ...internalConfig, delay: result < 0.0 ? 0.0 : result });\r\n            }}\r\n            value={internalConfig[\"delay\"]}\r\n          />\r\n        </FormGroup>\r\n        <FormGroup check>\r\n          <Label check>\r\n            <Input\r\n              type=\"checkbox\"\r\n              onChange={(e) =>\r\n                setIC({ ...internalConfig, timed: e.target.checked })\r\n              }\r\n              checked={internalConfig[\"timed\"]}\r\n            />{\" \"}\r\n            Configuration uses timed/interval fields.\r\n          </Label>\r\n        </FormGroup>\r\n        <FormGroup>\r\n          <Label for=\"stopCondition\">Stopping condition</Label>\r\n          <Input\r\n            type=\"select\"\r\n            name=\"select\"\r\n            id=\"stopCondition\"\r\n            onChange={(e) =>\r\n              setIC({ ...internalConfig, stop_condition: e.target.value })\r\n            }\r\n            value={internalConfig[\"stop_condition\"]}\r\n          >\r\n            <option value=\"none\">None</option>\r\n            <option value=\"text\">When text scenarios are done</option>\r\n            <option value=\"hex\">When hex scenarios are done</option>\r\n            <option value=\"text-hex\">\r\n              When hex and text scenarios are done\r\n            </option>\r\n          </Input>\r\n        </FormGroup>\r\n      </ModalBody>\r\n      <ModalFooter>\r\n        <Button\r\n          color=\"primary\"\r\n          onClick={(e) => props.sendConfig(internalConfig)}\r\n        >\r\n          Save\r\n        </Button>{\" \"}\r\n        <Button color=\"secondary\" onClick={props.closeSettings}>\r\n          Cancel\r\n        </Button>\r\n      </ModalFooter>\r\n    </Modal>\r\n  );\r\n};\r\nexport default EmulatorSettings;\r\n","import React, { useState } from \"react\";\r\nimport { Button } from \"reactstrap\";\r\n\r\nconst IntInput = (props) => {\r\n  const [signed, setSigned] = useState(\r\n    props.signed == null ? false : props.signed\r\n  ); // Whether the value is signed or unsigned\r\n  const [bits, setBits] = useState(props.bits == null ? 32 : props.bits); // The amount of bits that the input should use by default\r\n  const [representation, setRepresentation] = useState(1); // The index of the number representation system, 0: binary, 1: decimal, 2: hexadecimal\r\n  const [value, setValue] = useState(props.value == null ? 0 : props.value); // The value of the intinput\r\n  const [error, setError] = useState(false); // Whether there is an error with the input, e.g. because it is invalid.\r\n  const representations = [2, 10, 16]; // Number representation systems\r\n  const representationPatterns = [/[^0-1]+/g, /[^-,0-9]+/g, /[^0-9a-fA-F]+/g]; // The Regexes to validate input for these systems.\r\n\r\n  // Format the current value as a valid string.\r\n  const formatString = () => {\r\n    switch (representations[representation]) {\r\n      case 2:\r\n        return (value >>> 0).toString(2).padStart(bits, \"0\");\r\n      case 10:\r\n        return value;\r\n      case 16:\r\n        return (value >>> 0).toString(16).padStart(Math.ceil(bits / 4), \"0\");\r\n      default:\r\n        return \"err\";\r\n    }\r\n  };\r\n\r\n  // Switch the sign of the value. Convert signed integers into unsigned and viceversa.\r\n  const switchSign = () => {\r\n    let newSign = !signed; // React state updates are not instant :/\r\n    setSigned(newSign);\r\n    let newVal;\r\n    if (newSign) {\r\n      newVal = (value << bits) >> bits;\r\n    } else {\r\n      newVal = value >>> 0;\r\n    }\r\n    setValue(newVal);\r\n    props.onChange({ target: { value: newVal, signed: signed, bits: bits } });\r\n  };\r\n\r\n  // Fired when the value is changed, e.g. by typing. Event is built-in javascript event.\r\n  const valueChange = (event) => {\r\n    let val = event.target.value.replace(\r\n      representationPatterns[representation],\r\n      \"\"\r\n    );\r\n    if (!signed && val.indexOf(\"-\") > -1) {\r\n      // Sign is used while the value is supposed to be unsigned\r\n      setValue(val.replace(\"-\", \"\")); // Remove the sign\r\n      return;\r\n    }\r\n    let parsedVal = parseInt(val, representations[representation]); // Parse as int.\r\n    if (Object.is(NaN, parsedVal)) {\r\n      // If the value is not an int, return.\r\n      setValue(val); // Necessary to show the value on the controlled component\r\n      setError(true);\r\n      return;\r\n    }\r\n    // Check if there are any errors with the value, e.g. larger or smaller than the minimum\r\n    // possible with the amount of bits.\r\n    // TODO cleanup?\r\n    setError(false);\r\n    if (signed && parsedVal < -(2 ** (bits - 1))) {\r\n      console.log(\"err 1\");\r\n      setError(true);\r\n      // parsedVal = (-(2**(bits - 1)))\r\n    } else if (signed && parsedVal > 2 ** (bits - 1) - 1) {\r\n      console.log(\"err 2\");\r\n      setError(true);\r\n      // parsedVal = (2**(bits - 1) -1)\r\n    } else if (!signed && parsedVal > 2 ** bits - 1) {\r\n      console.log(\"err 3\");\r\n      setError(true);\r\n      // parsedVal = (2**(bits) -1)\r\n    } else if (!signed && parsedVal < 0) {\r\n      console.log(\"err 4\");\r\n      setError(true);\r\n      // parsedVal = 0\r\n    }\r\n    setValue(parsedVal); // Set the value to show it on the controlled component\r\n    props.onChange({\r\n      target: { value: parsedVal, signed: signed, bits: bits },\r\n    });\r\n  };\r\n  // Fired when the value of bits is changed, e.g. by typing into the bits field. Event parameter is built-in javascript event.\r\n  const changeBits = (event) => {\r\n    if (event.target.value > 32) {\r\n      // A value larger than 32 bits is not allowed.\r\n      setBits(32);\r\n    } else {\r\n      setBits(event.target.value); // Set the value to show it on the controlled component\r\n    }\r\n    // Check if there are any errors with the value now, e.g. larger or smaller than the\r\n    //  minimum possible with the amount of bits.\r\n    // TODO cleanup?\r\n    setError(false);\r\n    if (signed && value < -(2 ** (event.target.value - 1))) {\r\n      console.log(\"err 1\");\r\n      setError(true);\r\n      // parsedVal = (-(2**(bits - 1)))\r\n    } else if (signed && value > 2 ** (event.target.value - 1) - 1) {\r\n      console.log(\"err 2\");\r\n      setError(true);\r\n      // parsedVal = (2**(bits - 1) -1)\r\n    } else if (!signed && value > 2 ** event.target.value - 1) {\r\n      console.log(\"err 3\");\r\n      setError(true);\r\n      // parsedVal = (2**(bits) -1)\r\n    } else if (!signed && value < 0) {\r\n      console.log(\"err 4\");\r\n      setError(true);\r\n      // parsedVal = 0\r\n    }\r\n    // Trigger the onChange at the parent.\r\n    props.onChange({\r\n      target: { value: value, signed: signed, bits: event.target.value },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"intInput\">\r\n      <div>\r\n        {props.signed !== null ? (\r\n          <Button outline color=\"primary\" onClick={() => switchSign()}>\r\n            {signed ? \"±\" : \"+\"}\r\n          </Button>\r\n        ) : null}\r\n      </div>\r\n      <div>\r\n        <div className=\"input-group\">\r\n          <input\r\n            type=\"text\"\r\n            className={error ? \"form-control error\" : \"form-control\"}\r\n            value={formatString()}\r\n            onChange={(event) => valueChange(event)}\r\n          />\r\n          <input\r\n            type=\"numeric\"\r\n            className={error ? \"form-control error\" : \"form-control\"}\r\n            value={bits}\r\n            onChange={(event) => changeBits(event)}\r\n            placeholder=\"bits\"\r\n            style={{ width: \"30px\" }}\r\n          />\r\n          <Button\r\n            outline\r\n            color=\"primary\"\r\n            onClick={() => setRepresentation((representation + 1) % 3)}\r\n          >\r\n            {representations[representation]}\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default IntInput;\r\n","import IntInput from \"components/dashboard/IntInput\";\r\nimport React, { useState } from \"react\";\r\nimport { Input } from \"reactstrap\";\r\n\r\nconst OverrideControls = (props) => {\r\n  const [controls, setControls] = useState(\r\n    props.item.controls.length > 2 ? 2 : 0\r\n  ); // The current control is an integer\r\n\r\n  const nextControl = (leng) => {\r\n    setControls((controls + 1) % leng);\r\n  }; // The next control is the current control +1, but this cannot go higher than the amount of controls, so modulo the amount of controls (leng param).\r\n\r\n  return (\r\n    <>\r\n      <td className=\"flex\">\r\n        {props.item.controls.map((control, index) => {\r\n          switch (control.type) {\r\n            case \"intInput\":\r\n              return (\r\n                <div\r\n                  key={\"c\" + props.item.key + \"-\" + index}\r\n                  className={\r\n                    controls === index ? \"mt-2 mb-2\" : \"hidden mt-2 mb-2\"\r\n                  }\r\n                >\r\n                  <IntInput\r\n                    signed={props.item.signed}\r\n                    bits={props.item.bits}\r\n                    value={\r\n                      controls === index && props.overridden\r\n                        ? props.overrideValue\r\n                        : props.item.default\r\n                    }\r\n                    onChange={(event) =>\r\n                      props.onChangInput(\r\n                        props.item.key,\r\n                        event,\r\n                        props.item.text,\r\n                        event.target.bits,\r\n                        event.target.signed\r\n                      )\r\n                    }\r\n                  />\r\n                </div>\r\n              );\r\n            case \"dropdown\":\r\n              return (\r\n                <div\r\n                  key={\"c\" + props.item.key + \"-\" + index}\r\n                  className={\r\n                    controls === index ? \"mt-2 mb-2\" : \"hidden mt-2 mb-2\"\r\n                  }\r\n                >\r\n                  <Input\r\n                    type=\"select\"\r\n                    name=\"select\"\r\n                    className=\"emphasized_selector\"\r\n                    onChange={(event) =>\r\n                      props.onChangInput(\r\n                        props.item.key,\r\n                        event,\r\n                        props.item.text,\r\n                        props.item.bits,\r\n                        props.item.signed\r\n                      )\r\n                    }\r\n                  >\r\n                    <option value=\"\"> </option>\r\n                    {Object.keys(control.values).map((key) => {\r\n                      return (\r\n                        <option key={key} value={control.values[key]}>\r\n                          {control.values[key]}: {key}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                  </Input>\r\n                </div>\r\n              );\r\n            case \"stringInput\": // TODO custom properties for hex etc.  Placeholder\r\n              return (\r\n                <div\r\n                  key={\"c\" + props.item.key + \"-\" + index}\r\n                  className={\r\n                    controls === index ? \"mt-2 mb-2\" : \"hidden mt-2 mb-2\"\r\n                  }\r\n                >\r\n                  <input\r\n                    onChange={(event) =>\r\n                      props.onChangInput(\r\n                        props.item.key,\r\n                        event,\r\n                        props.item.text,\r\n                        props.item.bits,\r\n                        props.item.signed\r\n                      )\r\n                    }\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    value={\r\n                      controls === index && props.overridden\r\n                        ? props.overrideValue\r\n                        : props.item.default\r\n                    }\r\n                  />\r\n                </div>\r\n              );\r\n            case \"range\":\r\n              return (\r\n                <div\r\n                  key={\"c\" + props.item.key + \"-\" + index}\r\n                  className={controls === index ? \"mt-2\" : \"hidden mt-2\"}\r\n                >\r\n                  <input\r\n                    type=\"range\"\r\n                    className=\"form-range\"\r\n                    min={control.min}\r\n                    max={control.max}\r\n                    onChange={(event) =>\r\n                      props.onChangInput(\r\n                        props.item.key,\r\n                        event,\r\n                        props.item.text,\r\n                        props.item.bits,\r\n                        props.item.signed\r\n                      )\r\n                    }\r\n                    step=\"1\"\r\n                    value={\r\n                      controls === index && props.overridden\r\n                        ? props.overrideValue\r\n                        : props.item.default\r\n                    }\r\n                  />\r\n                  <div className=\"d-flex justify-content-between\">\r\n                    <small className=\"text-muted\">{control.min}</small>\r\n                    <small>{props.overrideValue}</small>\r\n                    <small className=\"text-muted\">{control.max}</small>\r\n                  </div>\r\n                </div>\r\n              );\r\n            default:\r\n              return null;\r\n          }\r\n        })}\r\n      </td>\r\n      <td>\r\n        <span data-abc=\"true\" style={{ cursor: \"pointer\" }}>\r\n          <span\r\n            className=\"badge bg-primary-lt text-uppercase\"\r\n            onClick={() => nextControl(props.item.controls.length)}\r\n          >\r\n            <i className=\"fas fa-retweet\" />\r\n          </span>\r\n        </span>\r\n      </td>\r\n    </>\r\n  );\r\n};\r\nexport default OverrideControls;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Badge,\r\n  Button,\r\n  ButtonGroup,\r\n  ButtonToolbar,\r\n  Col,\r\n  DropdownItem,\r\n  DropdownMenu,\r\n  DropdownToggle,\r\n  Row,\r\n  Table,\r\n  UncontrolledButtonDropdown,\r\n} from \"reactstrap\";\r\nimport Toggle from \"react-bootstrap-toggle\";\r\nimport socketIOClient from \"socket.io-client\";\r\nimport TextTransition, { presets } from \"react-text-transition\";\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\nimport EmulatorSettings from \"components/dashboard/EmulatorSettings\";\r\nimport OverrideControls from \"components/dashboard/OverrideControls\";\r\nconst ENDPOINT = \":3030/\"; // By default the VEmulate Webserver runs on port 3030.\r\n\r\nconst Fade = ({ children, ...props }) => (\r\n  <CSSTransition {...props} timeout={200} classNames=\"fade\" unmountOnExit>\r\n    {children}\r\n  </CSSTransition>\r\n); // A fade transition for elements in the GUI.\r\n\r\nconst OverrideDashboard = () => {\r\n  const [running, setRunning] = useState(\"stopped\"); // The state of the emulator, used for the buttons. Can be stopped, running or paused.\r\n  const [scenarios, setScenarios] = useState([]); // Contains the list of device configurations that are implemented.\r\n  const [fields, setFields] = useState([]); //Contains the fields that are implemented  for the device.\r\n  const [name, setName] = useState(\"---\"); //The name of the currently selected device configuration\r\n  const [overrides, setOverrides] = useState([]); //The overrides that are used, a list of field keys.\r\n  const [overrideValues, setOverrideValues] = useState({}); //The internal values of the overrides\r\n  const [overrideValuesShared, setOverrideValuesShared] = useState({}); // The override values as shared by the Flask webserver with all connected clients\r\n  const [searchTerm, setSearchTerm] = useState(\"\"); // The search term of the overriding field's search field.\r\n  const [serialmessages, setSerialmessages] = useState([]); // List of the serial messages that have been received or sent by the emulator\r\n  const [settingsOpen, setSettingsOpen] = useState(false); // Whether or not the settings modal is open\r\n  const [settings, setSettings] = useState({}); // Representation of the internal settings of the emulator\r\n  const [socket, setSocket] = useState(undefined); // The socket that is used to communicate with the backend\r\n\r\n  // SETTING UP WEBSOCKET TRIGGERS\r\n  useEffect(() => {\r\n    let socket2 = socketIOClient(ENDPOINT); // socket2 will be saved in the state.\r\n    const dec = new TextDecoder(\"utf-8\"); // a text decoder.\r\n    socket2.on(\"emulator_out\", (data) => {\r\n      // Outgoing emulator message\r\n      setSerialmessages((oldMessages) => [\r\n        {\r\n          type: \"output\",\r\n          datetime: new Date().toLocaleString(),\r\n          content: dec.decode(data.data),\r\n        },\r\n        ...oldMessages,\r\n      ]);\r\n    });\r\n    socket2.on(\"emulator_in\", (data) => {\r\n      // Incoming emulator message\r\n      setSerialmessages((oldMessages) => [\r\n        {\r\n          type: \"input\",\r\n          datetime: new Date().toLocaleString(),\r\n          content: dec.decode(data.data),\r\n        },\r\n        ...oldMessages,\r\n      ]);\r\n    });\r\n    socket2.on(\"configs\", (data) => {\r\n      // Set the configs which are available to be loaded.\r\n      setScenarios(data.data);\r\n    });\r\n    socket2.on(\"settings\", (data) => {\r\n      // When the VEmulate settings are shared over the websocket.\r\n      setSettings(data);\r\n    });\r\n    socket2.on(\"hard_reset\", () => {\r\n      // Hard reset the page.\r\n      window.location.reload(false);\r\n    });\r\n    socket2.on(\"emulator_status\", (data) => {\r\n      // Set the status of the GUI to reflect the status of VEmulate\r\n      setRunning(data.data);\r\n    });\r\n    socket2.on(\"current_overrides\", (data) => {\r\n      // Set the overrides in the GUI to reflect the values of VEmulate\r\n      setOverrides(data.data);\r\n      setOverrideValuesShared(data.values);\r\n    });\r\n    socket2.on(\"loaded_config\", (data) => {\r\n      // When a device configuration is shared over the websocket\r\n      setName(data.name);\r\n      setFields(data.fields);\r\n    });\r\n    socket2.emit(\"connected\"); // Send a connected message\r\n    setSocket(socket2); // and save the socket to the state, for later re-use.\r\n  }, []);\r\n\r\n  // METHODS THAT USE SOCKET\r\n  // 1. Load a specific device configuration\r\n  const loadScenario = (scenario) => {\r\n    socket.emit(\"load_config\", scenario);\r\n  };\r\n  // 2. Run the emulator\r\n  const run = () => {\r\n    socket.emit(\"run\");\r\n  };\r\n  // 3. Pause the emulator\r\n  const pause = () => {\r\n    socket.emit(\"pause\");\r\n  };\r\n  // 4. Stop the emulator\r\n  const stop = () => {\r\n    socket.emit(\"stop\");\r\n  };\r\n  // 5. Open the settings modal. Ask for the current settings used by VEmulate when opening the modal.\r\n  const openSettings = () => {\r\n    socket.emit(\"get_settings\");\r\n    setSettingsOpen(true);\r\n  };\r\n  // 6. Save the settings modal to the server. Hide the modal.\r\n  const saveSettings = (settings) => {\r\n    socket.emit(\"set_settings\", settings);\r\n    setSettingsOpen(false);\r\n  };\r\n  // 7. On the toggle of a field to generated, or to overridden mode.\r\n  const onToggle = (key, e, protocol, bits, signed, default_val) => {\r\n    setOverrides(overrides.filter((item) => item !== key)); // Pre-emptively remove the override, for a smooth transition.\r\n    if (e) {\r\n      // If the field is now using overridden mode:\r\n      socket.emit(\"override\", {\r\n        key: key,\r\n        text: protocol,\r\n        value: createOverride(\r\n          key in overrideValues ? overrideValues[key] : default_val,\r\n          protocol,\r\n          key,\r\n          bits,\r\n          signed\r\n        ),\r\n        stored_val: overrideValues[key],\r\n      });\r\n    } else {\r\n      // If the field is now using generated mode:\r\n      socket.emit(\"remove_override\", { key: key, text: protocol });\r\n    }\r\n  };\r\n\r\n  // 8. On a changing input, send a message that the override has changed.\r\n  const onChangInput = (key, event, protocol, bits, signed) => {\r\n    setOverrideValues({ ...overrideValues, [key]: event.target.value });\r\n    if (overrides.includes(key)) {\r\n      socket.emit(\"override\", {\r\n        key: key,\r\n        text: protocol,\r\n        value: createOverride(event.target.value, protocol, key, bits, signed),\r\n        stored_val: event.target.value,\r\n      });\r\n    }\r\n  };\r\n\r\n  // OTHERS\r\n  // Create a valid fixed scenario, given a value.\r\n  const createOverride = (value, protocol, key, bits, signed) => {\r\n    let isInt = Number.isInteger(Number(value));\r\n\r\n    return [\r\n      {\r\n        type: isInt ? \"IntFixed\" : \"StringFixed\",\r\n        protocol: protocol,\r\n        key: key,\r\n        bits: bits,\r\n        signed: signed,\r\n        value: isInt ? Number(value) : value,\r\n      },\r\n    ];\r\n  };\r\n\r\n  return (\r\n    <main className=\"px-md-5\">\r\n      <EmulatorSettings\r\n        settingsOpen={settingsOpen}\r\n        closeSettings={() => setSettingsOpen(false)}\r\n        sendConfig={saveSettings}\r\n        persistentConfig={settings}\r\n      ></EmulatorSettings>\r\n      <div className=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">\r\n        <h2>\r\n          Emulating:{\" \"}\r\n          <strong>\r\n            <TextTransition text={name} springConfig={presets.wobbly} />\r\n          </strong>\r\n        </h2>\r\n        <ButtonToolbar className=\"mb-2 mb-md-0\">\r\n          <ButtonGroup className=\"me-2\">\r\n            {running === \"running\" ? (\r\n              <Button outline color=\"warning\" size=\"sm\" onClick={() => pause()}>\r\n                <i className=\"fas fa-pause\" />\r\n              </Button>\r\n            ) : (\r\n              <Button outline color=\"success\" size=\"sm\" onClick={() => run()}>\r\n                <i className=\"fas fa-play\" />\r\n              </Button>\r\n            )}\r\n            {running === \"paused\" || running === \"running\" ? (\r\n              <Button outline color=\"danger\" size=\"sm\" onClick={() => stop()}>\r\n                <i className=\"fas fa-stop\" />\r\n              </Button>\r\n            ) : null}\r\n          </ButtonGroup>\r\n          <Button\r\n            className=\"me-2\"\r\n            outline\r\n            color=\"info\"\r\n            size=\"sm\"\r\n            onClick={() => openSettings()}\r\n          >\r\n            <i className=\"fas fa-cog\"></i>\r\n          </Button>\r\n          <UncontrolledButtonDropdown size=\"sm\" color=\"secondary\">\r\n            <DropdownToggle caret>\r\n              <i className=\"fas fa-sliders-h\" />\r\n              &nbsp; Load Device Configuration\r\n            </DropdownToggle>\r\n            <DropdownMenu right>\r\n              {scenarios.map((item, index) => {\r\n                return (\r\n                  <DropdownItem\r\n                    onClick={() => loadScenario(item)}\r\n                    key={item + index}\r\n                  >\r\n                    {item}\r\n                  </DropdownItem>\r\n                );\r\n              })}\r\n            </DropdownMenu>\r\n          </UncontrolledButtonDropdown>\r\n        </ButtonToolbar>\r\n      </div>\r\n      <Row>\r\n        <Col md=\"8\">\r\n          {\" \"}\r\n          <input\r\n            onChange={(event) =>\r\n              setSearchTerm(event.target.value.toUpperCase())\r\n            }\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            placeholder={\"Search\"}\r\n            value={searchTerm}\r\n          />\r\n          <Table responsive className=\"table-theme table-row v-middle\">\r\n            <thead>\r\n              <tr>\r\n                <th className=\"text-muted\" style={{ width: \"60px\" }}>\r\n                  Name / Key\r\n                </th>\r\n                <th className=\"text-muted\" style={{ width: \"60%\" }} />\r\n                <td style={{ width: \"5px\" }} />\r\n                <td />\r\n                <th className=\"text-muted\" style={{ width: \"50px\" }}>\r\n                  Override Value\r\n                </th>\r\n                <th className=\"text-muted\" style={{ width: \"110px\" }}>\r\n                  Overridde status\r\n                </th>\r\n                <th className=\"text-muted\" style={{ width: \"30px\" }}>\r\n                  Text protocol\r\n                </th>\r\n              </tr>\r\n            </thead>\r\n            <TransitionGroup className=\"controls-list\" component=\"tbody\">\r\n              {fields.map((item) => {\r\n                return (\r\n                  <Fade key={name + \"-\" + item.key}>\r\n                    <tr\r\n                      className={\r\n                        (item.key + \" \" + item.name)\r\n                          .toUpperCase()\r\n                          .indexOf(searchTerm) > -1\r\n                          ? \"v-middle\"\r\n                          : \"hidden v-middle\"\r\n                      }\r\n                    >\r\n                      <td>\r\n                        <Badge color=\"primary\" className=\"text-uppercase\">\r\n                          {item.name}\r\n                        </Badge>\r\n                        <Badge\r\n                          color=\"secondary\"\r\n                          className=\"text-uppercase\"\r\n                          style={{ display: \"block\" }}\r\n                        >\r\n                          {item.key}\r\n                        </Badge>\r\n                      </td>\r\n                      <OverrideControls\r\n                        item={item}\r\n                        overridden={item.key in overrideValues}\r\n                        overrideValue={overrideValues[item.key]}\r\n                        onChangInput={onChangInput}\r\n                      />\r\n                      <td />\r\n                      <td className=\"flex\">\r\n                        <span className=\"badge bg-primary-lt\">\r\n                          {overrideValuesShared[item.key]}\r\n                        </span>\r\n                      </td>\r\n                      <td>\r\n                        <Toggle\r\n                          onClick={(event) =>\r\n                            onToggle(\r\n                              item.key,\r\n                              event,\r\n                              item.text,\r\n                              item.bits,\r\n                              item.signed,\r\n                              item.default\r\n                            )\r\n                          }\r\n                          on=\"Overridden\"\r\n                          off=\"Generated\"\r\n                          size=\"xs\"\r\n                          active={overrides.includes(item.key)}\r\n                        />\r\n                      </td>\r\n                      <td>\r\n                        {item.text && item.text === true ? (\r\n                          <span className=\"badge badge-circle xs text-primary\" />\r\n                        ) : null}\r\n                      </td>\r\n                    </tr>\r\n                  </Fade>\r\n                );\r\n              })}\r\n            </TransitionGroup>\r\n          </Table>\r\n        </Col>\r\n        <Col md=\"4\">\r\n          <Table\r\n            responsive\r\n            className=\"table table-theme table-row v-middle restrict-height\"\r\n          >\r\n            <thead>\r\n              <tr>\r\n                <td style={{ width: \"16.66%\" }} />\r\n                <td style={{ width: \"60%\" }} />\r\n                <td style={{ width: \"23.33%\" }}>\r\n                  <Button\r\n                    outline\r\n                    color=\"secondary\"\r\n                    size=\"sm\"\r\n                    onClick={() => setSerialmessages([])}\r\n                  >\r\n                    <i className=\"fas fa-trash\" />\r\n                  </Button>\r\n                </td>\r\n              </tr>\r\n            </thead>\r\n            <tbody id=\"log\">\r\n              {serialmessages.map((message) => {\r\n                return (\r\n                  <tr className=\"v-middle slide\">\r\n                    <td>\r\n                      <span data-abc=\"true\">\r\n                        {message.type === \"output\" ? (\r\n                          <span className=\"badge bg-success-lt text-uppercase\">\r\n                            Output\r\n                          </span>\r\n                        ) : (\r\n                          <span className=\"badge bg-info-lt text-uppercase\">\r\n                            Input\r\n                          </span>\r\n                        )}\r\n                      </span>\r\n                    </td>\r\n                    <td className=\"flex\">\r\n                      <pre className=\"mb-0 align-left\">{message.content}</pre>\r\n                    </td>\r\n                    <td>{message.datetime}</td>\r\n                  </tr>\r\n                );\r\n              })}\r\n            </tbody>\r\n          </Table>\r\n        </Col>\r\n      </Row>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default OverrideDashboard;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport TextTransition, { presets } from \"react-text-transition\";\r\nimport Nestable from \"react-nestable\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardBody,\r\n  CardHeader,\r\n  Col,\r\n  FormGroup,\r\n  Input,\r\n  Label,\r\n  Modal,\r\n  ModalBody,\r\n  ModalFooter,\r\n  ModalHeader,\r\n  Row,\r\n} from \"reactstrap\";\r\nimport socketIOClient from \"socket.io-client\";\r\nimport SyntaxHighlighter from \"react-syntax-highlighter\";\r\nimport { docco } from \"react-syntax-highlighter/dist/esm/styles/hljs\";\r\n\r\nconst templates = {\r\n  Loop: { type: \"Loop\", amount: \"\", seed: \"\", values: [] },\r\n  IntFixed: { type: \"IntFixed\", amount: \"\", value: \"\" },\r\n  StringFixed: { type: \"StringFixed\", amount: \"\", value: \"\" },\r\n  RandomInt: { type: \"RandomInt\", amount: \"\", seed: \"\", min: \"\", max: \"\" },\r\n}; // The scenarios and their attributes that are currently implemented in the configuration builder.\r\n\r\nconst ConfigBuilder = () => {\r\n  const [tree, setTree] = useState([]); // The tree of the 'test' field, in which the items of the field editor (the drag and drop scenario editor) are placed\r\n  const [preset, setPresets] = useState({}); // A dictionary with as key the name of the preset and as value a list of keys of fields within the preset\r\n  const [selectedPreset, setSelectedPreset] = useState(\"\"); // The currently selected preset name\r\n  const [selectedPreset2, setSelectedPreset2] = useState({\r\n    // The currently selected preset field\r\n    key: \"\",\r\n    description: \"\",\r\n  });\r\n  const [config, setConfig] = useState({ preset: \"\", preset_fields: {} }); // Built-in representation of the config, this excludes the tree variable\r\n  const [modal, setModal] = useState(false); // Whether the modal of the generated config should be shown\r\n  const [yaml, setYaml] = useState(\"\"); // The yaml of the genereated config\r\n  const toggle = () => setModal(!modal); // Toggle the modal of the generated config.\r\n  // Setting up the websocket:\r\n  useEffect(() => {\r\n    let socket2 = socketIOClient(\":3030/\");\r\n    socket2.on(\"presets\", (data) => {\r\n      setPresets(data.data);\r\n    });\r\n    // Ask the websocket for the presets that are implemented\r\n    socket2.emit(\"get_presets\");\r\n  }, []);\r\n\r\n  /**\r\n   * The final configuration can contain fields such as the id, integers that are converted into strings\r\n   * and undefined variables. These can be removed or altered to create the final configuration\r\n   * @param {object} obj the object to cleanse\r\n   */\r\n  const cleanse = (obj) => {\r\n    Object.keys(obj).forEach(function (key) {\r\n      var value = obj[key];\r\n      var type = typeof value;\r\n      if (key === \"id\") {\r\n        // Remove the id\r\n        delete obj[key];\r\n      }\r\n      if (Number.isInteger(Number(value))) {\r\n        obj[key] = Number(value); // Cast to an integer if it is an integer\r\n      }\r\n      if (type === \"object\") {\r\n        // Recursively travel through the configuration\r\n        cleanse(value);\r\n        if (!Object.keys(value).length) {\r\n          delete obj[key];\r\n        }\r\n      } else if (type === \"undefined\") {\r\n        // Remove an undefined key\r\n        delete obj[key];\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Preview the generated YAML configuration\r\n   */\r\n  const preview = () => {\r\n    let config_copy = Object.assign({}, config);\r\n    config_copy[\"fields\"] = {\r\n      name: \"Test\",\r\n      key: \"T\",\r\n      units: \"T\",\r\n      values: tree,\r\n    }; // Create a copy of the config, before using the cleanse operation.\r\n    // A copy is necessary since we cannot directly alter the state.\r\n    cleanse(config_copy);\r\n    const yaml = require(\"js-yaml\"); // use js-yaml to create the yaml representation\r\n    setYaml(yaml.dump(config_copy));\r\n    toggle();\r\n  };\r\n  /***\r\n   * The representation of a field is nested, as such finding the ancestors  of a nested object is not easily done.\r\n   * By recursing through the nested scenarios, the child with a similar id to the nested object is found. As the id\r\n   * is unique, the found object will be identical. The path through the nested objects, i.e. the indices that were used\r\n   * in the values field, to arrive at the nested object, is returned as a result of this function.\r\n   * @param {*} object   The object parameter is the root of the nested scenarios\r\n   * @param {*} key      The id of the nested object to which a path has to be found\r\n   * @param {*} route    the current route.\r\n   */\r\n  const findVal = (object, key, route) => {\r\n    let value;\r\n    Object.keys(object).some(function (k) {\r\n      if (k === \"id\" && object[k] === key) {\r\n        value = route;\r\n        return true;\r\n      }\r\n      if (object[k] && typeof object[k] === \"object\") {\r\n        let route2 = route.slice();\r\n        if (k !== \"values\") {\r\n          route2.push(k);\r\n        }\r\n        value = findVal(object[k], key, route2);\r\n        return value !== undefined;\r\n      }\r\n      return false;\r\n    });\r\n    return value;\r\n  };\r\n\r\n  /** Update a nested object's attribute. To reflect this update in the state, the entire tree has to be updated.\r\n   * To do this, the ancestors of the nested object has to be known, which is found using route as retrieved via the findVal function.\r\n   * @param {*} id the id of the nested object whose attribute has to be changed\r\n   * @param {*} attr the attrribute name that has to be changed\r\n   * @param {*} newvalue the new value of the attribute\r\n   */\r\n  const update = (id, attr, newvalue) => {\r\n    let route = findVal(tree, id, []);\r\n    let config = tree.slice();\r\n    let val = tree;\r\n    for (let i = 0; i < route.length - 1; i++) {\r\n      val = val[route[i]].values;\r\n    }\r\n    val[route[route.length - 1]][attr] = newvalue;\r\n    setTree(config);\r\n  };\r\n\r\n  /**\r\n   * Add an item to the scenario tree. The key parameter indicates which template type is used for the item.\r\n   * The item will have a randomly generated ID, to make it identifiable for the findVal function.\r\n   * @param {string} key Key of a template in the templates constant.\r\n   */\r\n  const addItem = (key) => {\r\n    let templateClone = Object.assign({}, templates[key]);\r\n    templateClone[\"id\"] = \"_\" + Math.random().toString(36).substr(2, 9);\r\n    setTree([...tree, templateClone]);\r\n  };\r\n\r\n  /**\r\n   * Add an item to the list of presets\r\n   * @param {string} key the key of the preset that will be added.\r\n   */\r\n  const addPreset = (key) => {\r\n    setConfig({\r\n      ...config,\r\n      preset: selectedPreset,\r\n      preset_fields: { ...config.preset_fields, [key]: \"default\" },\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Render an item for the drag and drop view.\r\n   * @param {*} item a node in the tree that has to be rendered\r\n   * @returns React object of the rendered card.\r\n   */\r\n  const renderItem = ({ item }) => {\r\n    return (\r\n      <Card>\r\n        <CardHeader>{item.type}</CardHeader>\r\n        <CardBody>\r\n          {Object.keys(item).map((key) => {\r\n            if (key === \"values\" || key === \"id\" || key === \"type\") {\r\n              return <></>;\r\n            }\r\n            return (\r\n              <FormGroup>\r\n                <Label for=\"examplePassword\">{key}</Label>\r\n                <Input\r\n                  type=\"text\"\r\n                  value={item[key]}\r\n                  onChange={(event) => {\r\n                    update(item.id, key, event.target.value);\r\n                  }}\r\n                />\r\n              </FormGroup>\r\n            );\r\n          })}\r\n        </CardBody>\r\n      </Card>\r\n    );\r\n  };\r\n  return (\r\n    <main className=\"px-md-5\">\r\n      <div className=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">\r\n        <h2>\r\n          Creating Config:{\" \"}\r\n          <Button onClick={(event) => preview()}>Generate config</Button>\r\n          <strong>\r\n            <TextTransition\r\n              text={\r\n                \"name\" in config && config.name !== undefined\r\n                  ? config.name\r\n                  : \"---\"\r\n              }\r\n              springConfig={presets.wobbly}\r\n            />\r\n          </strong>\r\n        </h2>\r\n      </div>\r\n      <Row>\r\n        <Modal isOpen={modal} toggle={toggle}>\r\n          <ModalHeader toggle={toggle}>Generated Config</ModalHeader>\r\n          <ModalBody>\r\n            <SyntaxHighlighter language=\"yaml\" style={docco}>\r\n              {yaml}\r\n            </SyntaxHighlighter>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button\r\n              color=\"primary\"\r\n              onClick={(e) => navigator.clipboard.writeText(yaml)}\r\n            >\r\n              Copy\r\n            </Button>{\" \"}\r\n            <Button color=\"secondary\" onClick={toggle}>\r\n              Cancel\r\n            </Button>\r\n          </ModalFooter>\r\n        </Modal>\r\n        <div className=\"col md-4 justify-content-center\">\r\n          <div className=\"card\" style={{ width: \"100%\" }}>\r\n            <h5 className=\"card-header\">Base Information</h5>\r\n            <div className=\"card-body\">\r\n              <h5 className=\"card-title \">Test Name</h5>\r\n              <p className=\"card-text\">\r\n                The name that is used to describe this specific test. This will\r\n                only be used for visual purposes and is not used in the\r\n                protocol.\r\n              </p>\r\n              <div className=\"form-group\">\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  id=\"exampleFormControlInput1\"\r\n                  placeholder=\"MPPT Fuzzing\"\r\n                  onChange={(event) =>\r\n                    setConfig({ ...config, name: event.target.value })\r\n                  }\r\n                />\r\n              </div>\r\n              <h5 className=\"card-title mt-3\">Device Name</h5>\r\n              <p className=\"card-text\">\r\n                The name that is used to describe the device. This will only be\r\n                used for visual purposes and is not used in the protocol.\r\n              </p>\r\n              <div className=\"form-group\">\r\n                <input\r\n                  type=\"name\"\r\n                  className=\"form-control\"\r\n                  id=\"exampleFormControlInput1\"\r\n                  placeholder=\"MPPT BlueSolar\"\r\n                  onChange={(event) =>\r\n                    setConfig({ ...config, device: event.target.value })\r\n                  }\r\n                />\r\n              </div>\r\n\r\n              <h5 className=\"card-title mt-3\">Hex Version</h5>\r\n              <p className=\"card-text\">\r\n                Firmware version, optional if not using hex protocol.\r\n              </p>\r\n              <div className=\"form-group\">\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  id=\"exampleFormControlInput1\"\r\n                  placeholder=\"0x00\"\r\n                  onChange={(event) =>\r\n                    setConfig({ ...config, version: event.target.value })\r\n                  }\r\n                />\r\n              </div>\r\n              <h5 className=\"card-title mt-3\">Product ID</h5>\r\n              <p className=\"card-text\">\r\n                Product ID, optional if not using hex protocol\r\n              </p>\r\n              <div className=\"form-group\">\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  id=\"exampleFormControlInput1\"\r\n                  placeholder=\"0x00\"\r\n                  onChange={(event) =>\r\n                    setConfig({ ...config, product_id: event.target.value })\r\n                  }\r\n                />\r\n              </div>\r\n              <h5 className=\"card-title mt-3\">Bootloader</h5>\r\n              <p className=\"card-text\">\r\n                Payload required to enter boot mode, false by default to disable\r\n                'boot' command\r\n              </p>\r\n              <div className=\"form-group\">\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  id=\"exampleFormControlInput1\"\r\n                  placeholder=\"false\"\r\n                  onChange={(event) =>\r\n                    setConfig({ ...config, bootloader: event.target.value })\r\n                  }\r\n                />\r\n              </div>\r\n              <h5 className=\"card-title mt-3\">Emulation type</h5>\r\n              <p className=\"card-text\">\r\n                Does the device emulation involve text emulation, hex emulation,\r\n                or both.\r\n              </p>\r\n              <select\r\n                className=\"form-control emphasized_selector\"\r\n                onChange={(event) =>\r\n                  setConfig({ ...config, protocol: event.target.value })\r\n                }\r\n              >\r\n                <option value=\"text\">Text</option>\r\n                <option value=\"hex\">Hex</option>\r\n                <option value=\"text_hex\">Text + Hex</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <Col md={4}>\r\n          <div className=\"card\">\r\n            <h5 className=\"card-header\">Preset Protocol fields</h5>\r\n            <div className=\"card-body\">\r\n              <h5 className=\"card-title\">Load Preset</h5>\r\n              <p className=\"card-text\">\r\n                If the device is fully adhering the VE.Direct protocol, the\r\n                fields can be selected from a preset, to ease configuration.\r\n                Select the correct preset for the device below.\r\n              </p>\r\n              <select\r\n                className=\"form-control\"\r\n                disabled={\r\n                  \"preset_fields\" in config &&\r\n                  config.preset_fields != null &&\r\n                  Object.keys(config.preset_fields).length > 0\r\n                }\r\n                onChange={(event) => {\r\n                  setSelectedPreset(event.target.value);\r\n                  setSelectedPreset2(\r\n                    preset[event.target.value].length > 0\r\n                      ? preset[event.target.value][0]\r\n                      : { key: \"\", description: \"\" }\r\n                  );\r\n                  setConfig({\r\n                    ...config,\r\n                    preset_fields: undefined,\r\n                    preset: undefined,\r\n                  });\r\n                }}\r\n              >\r\n                {Object.keys(preset).map((name) => {\r\n                  return <option>{name}</option>;\r\n                })}\r\n              </select>\r\n              {selectedPreset !== \"\" ? (\r\n                <select\r\n                  className=\"form-control\"\r\n                  onChange={(event) => {\r\n                    setSelectedPreset2(\r\n                      preset[selectedPreset][event.target.value]\r\n                    );\r\n                  }}\r\n                >\r\n                  {preset[selectedPreset].map((name, index) => {\r\n                    return <option value={index}>{name.key}</option>;\r\n                  })}\r\n                </select>\r\n              ) : null}\r\n              {selectedPreset2.description}\r\n              <br></br>\r\n              {selectedPreset2.key !== \"\" ? (\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-sm btn-outline-primary\"\r\n                  onClick={() => addPreset(selectedPreset2.key)}\r\n                >\r\n                  Add {selectedPreset2.key}\r\n                </button>\r\n              ) : null}\r\n            </div>\r\n          </div>\r\n          {\"preset_fields\" in config && typeof config.preset_fields === \"object\"\r\n            ? Object.keys(config.preset_fields).map((item, index) => {\r\n                return (\r\n                  <div className=\"card text-white bg-dark mb-3 mt-3\">\r\n                    <div className=\"card-header\">\r\n                      {item}\r\n                      <button\r\n                        type=\"button\"\r\n                        className={\"btn btn-sm btn-outline-light\"}\r\n                        style={{ right: \"20px\", position: \"absolute\" }}\r\n                        onClick={() => {\r\n                          const configCopy = Object.assign({}, config);\r\n                          delete configCopy.preset_fields[item];\r\n                          setConfig(configCopy);\r\n                        }}\r\n                      >\r\n                        X\r\n                      </button>\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                      <button\r\n                        type=\"button\"\r\n                        className={\r\n                          config.preset_fields[item] === \"random\"\r\n                            ? \"btn btn-sm btn-primary mr-1\"\r\n                            : \"btn btn-sm btn-outline-light mr-1\"\r\n                        }\r\n                        onClick={() =>\r\n                          setConfig({\r\n                            ...config,\r\n                            preset_fields: {\r\n                              ...config.preset_fields,\r\n                              [item]: \"random\",\r\n                            },\r\n                          })\r\n                        }\r\n                      >\r\n                        Random\r\n                      </button>\r\n\r\n                      <button\r\n                        type=\"button\"\r\n                        className={\r\n                          config.preset_fields[item] === \"fuzzing\"\r\n                            ? \"btn btn-sm btn-primary mr-1\"\r\n                            : \"btn btn-sm btn-outline-light mr-1\"\r\n                        }\r\n                        onClick={() =>\r\n                          setConfig({\r\n                            ...config,\r\n                            preset_fields: {\r\n                              ...config.preset_fields,\r\n                              [item]: \"fuzzing\",\r\n                            },\r\n                          })\r\n                        }\r\n                      >\r\n                        Fuzzing\r\n                      </button>\r\n\r\n                      <button\r\n                        type=\"button\"\r\n                        className={\r\n                          config.preset_fields[item] === \"default\"\r\n                            ? \"btn btn-sm btn-primary mr-1\"\r\n                            : \"btn btn-sm btn-outline-light mr-1\"\r\n                        }\r\n                        onClick={() =>\r\n                          setConfig({\r\n                            ...config,\r\n                            preset_fields: {\r\n                              ...config.preset_fields,\r\n                              [item]: \"default\",\r\n                            },\r\n                          })\r\n                        }\r\n                      >\r\n                        Default\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })\r\n            : null}\r\n        </Col>\r\n        <Col md={4}>\r\n          <h3>\r\n            Scenario's:\r\n            <select\r\n              className=\"form-control\"\r\n              onChange={(event) => {\r\n                addItem(event.target.value);\r\n              }}\r\n            >\r\n              {Object.keys(templates).map((name) => {\r\n                return <option>{name}</option>;\r\n              })}\r\n            </select>\r\n          </h3>\r\n          <Nestable\r\n            items={tree}\r\n            renderItem={renderItem}\r\n            childrenProp={\"values\"}\r\n            confirmChange={(dragItem, destinationParent) => {\r\n              if (destinationParent == null) {\r\n                return true;\r\n              }\r\n              if (\r\n                destinationParent.type === \"BitBuffer\" ||\r\n                destinationParent.type === \"Loop\" ||\r\n                destinationParent.type === \"SelectRandom\"\r\n              ) {\r\n                return true;\r\n              } else {\r\n                return false;\r\n              }\r\n            }}\r\n            onChange={(items) => setTree(items)}\r\n          />\r\n        </Col>\r\n      </Row>\r\n    </main>\r\n  );\r\n};\r\nexport default ConfigBuilder;\r\n","import Navbar from \"components/Navbar\";\r\nimport OverrideDashboard from \"./OverrideDashboard\";\r\nimport React from \"react\";\r\nimport ConfigBuilder from \"layouts/ConfigBuilder\";\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <BrowserRouter>\r\n        <Navbar></Navbar>\r\n        <Switch>\r\n          <Route exact path=\"/scenariogen\" component={ConfigBuilder} />\r\n          <Route path=\"/\" component={OverrideDashboard} />\r\n        </Switch>\r\n      </BrowserRouter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/css/vemulate.css';\nimport './assets/css/fa.min.css';\nimport App from 'layouts/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}